{"remainingRequest":"/Users/xl/xlxlxl/rss-web/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xl/xlxlxl/rss-web/client/src/page/home/SiderBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/xl/xlxlxl/rss-web/client/src/page/home/SiderBar.vue","mtime":1663294546255},{"path":"/Users/xl/xlxlxl/rss-web/client/node_modules/cache-loader/dist/cjs.js","mtime":1663294660763},{"path":"/Users/xl/xlxlxl/rss-web/client/node_modules/babel-loader/lib/index.js","mtime":1653875377507},{"path":"/Users/xl/xlxlxl/rss-web/client/node_modules/cache-loader/dist/cjs.js","mtime":1663294660763},{"path":"/Users/xl/xlxlxl/rss-web/client/node_modules/vue-loader/lib/index.js","mtime":1663294661325}],"contextDependencies":[],"result":["\nimport CollapseMenuItem from './CollapseMenuItem'\nimport CategoryAPI from '../../api/category';\nimport ResourceAPI from '../../api/resource';\n\nexport default {\n    name:'sider-bar',\n    components:{\n        CollapseMenuItem\n    },\n    data(){\n        return {\n            categoryModal:false,\n            rssModal:false,\n            categoryName:'',//添加分类的名称\n            rssUrl:'',//添加rss的url\n            addRssCategoryId:-1,//添加rss时的分类id\n            refreshArticleBtnClick:null,\n        }\n    },\n    created(){\n        this.refreshArticleBtnClick = this.throttle(this.handleArticleRefresh)\n    },\n    computed:{\n        //用户头像\n        userAvatar(){\n            return this.$store.user.avatar;\n        },\n        //用户rss分类\n        categoryList(){\n            return this.$store.categoryList;\n        },\n    },\n    methods:{\n        openRssAddModal(id){\n            this.addRssCategoryId = id;\n            this.rssModal = !this.rssModal;\n        },\n        //添加rss分类\n        async handleAddCategory(){\n            this.categoryModal = false;\n\n            if(!this.categoryName){\n                this.$Message.error('分类名称不能为空');\n                return;\n            }\n\n            const res = await CategoryAPI.add({\n                name:this.categoryName.trim(),\n            })\n            if(res.data.status){\n                this.$store.categoryList.unshift(res.data.data);\n            }else{\n                this.$Message.error(res.data.data);\n            }\n        },\n        //添加rss\n        async handleAddRss(){\n            this.rssModal = false;\n\n            if(!this.rssUrl){\n                this.$Message.error('rss资源链接不能为空');\n                return;\n            }\n\n            const res = await ResourceAPI.add({\n                url:this.rssUrl,\n                categoryId:this.addRssCategoryId,\n            })\n            \n            if(res.data.status){\n                this.$store.resourceList.unshift(res.data.data.resource);\n            }else{\n                this.$Message.error(res.data.data);\n            }\n\n        },\n        //刷新文章 再次拉取文章 查看是否有新的文章\n        async handleArticleRefresh(){\n            this.$store.isLoading = true;\n\n            const res = await ResourceAPI.refreshArticle(this.$store.rssId)\n            if(res.data.status){\n                this.$store.articleList=res.data.data;\n            }else{\n                this.$Message.error(res.data.data);\n            }\n\n            this.$store.isLoading = false;\n        },\n        //节流\n        throttle(fn){\n            let map = {};\n            return ()=>{\n                if(!map[this.$store.rssId]){\n                    map[this.$store.rssId]=true\n                    fn()\n                    setTimeout(()=>{map[this.$store.rssId]=false},5*60*1000)\n                }else{\n                    this.$Message.error('不要频繁刷新')\n                }\n            }\n        },\n        //分类上下文菜单\n        async handleCategoryContextMenu(op){\n            if(op === 'delete'){\n                const res = await CategoryAPI.delete(this.$store.contextMenuCId)\n                if(res.data.status){\n                    if(res.data.status){\n                        //删除store里面的数据\n                        const index = this.$store.categoryList.findIndex(item=>item.id === this.$store.contextMenuCId)\n                        if(index !== -1){\n                            this.$store.categoryList.splice(index,1)\n                        }else{\n                            this.$Message.error('发生错误')\n                        }\n                    }else{\n                        this.$Message.error(res.data.data)\n                    }\n                }\n            }\n\n        },\n        //rss 上下文菜单\n        async handleRssContextMenu(op){\n            if(op === 'delete'){\n                const res = await ResourceAPI.delete(this.$store.contextMenuRId)\n                if(res.data.status){\n                    if(res.data.status){\n                        //删除store里面的数据\n                        const index = this.$store.resourceList.findIndex(item=>item.id === this.$store.contextMenuRId)\n                        if(index !== -1){\n                            this.$store.resourceList.splice(index,1)\n                        }else{\n                            this.$Message.error('发生错误')\n                        }\n                    }else{\n                        this.$Message.error(res.data.data)\n                    }\n                }\n            }\n        }\n    }\n}\n",{"version":3,"sources":["SiderBar.vue"],"names":[],"mappings":";AA6GA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SiderBar.vue","sourceRoot":"src/page/home","sourcesContent":["<template>\n    <div class=\"sider-bar\">\n        <div class=\"user\">\n            <img :src=\"userAvatar\">\n        </div>\n        <div class=\"menu\">\n            <div class=\"group\">\n                <div class=\"item\">\n                    <div>\n                        <Icon type=\"md-time\" />\n                        <p>稍后读</p>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div>\n                        <Icon type=\"md-star-outline\" />\n                        <p>收藏</p>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"group\">\n                <CollapseMenuItem \n                    v-for=\"item in categoryList\" \n                    :key=\"item.id\" \n                    :name=\"item.name\" \n                    :id=\"item.id\" \n                    @onAddRss=\"openRssAddModal($event)\"/>\n            </div>\n            \n            <div class=\"group\">\n                <div class=\"item\">\n                    <div>\n                        <Icon type=\"ios-help-circle-outline\" />\n                        <p>帮助</p>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div>\n                        <Icon type=\"ios-mail-open-outline\" />\n                        <p>问题反馈</p>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div>\n                        <Icon type=\"ios-information-circle-outline\" />\n                        <p>关于</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"action\">\n            <Icon type=\"md-refresh\" @click=\"refreshArticleBtnClick\"/>\n            <Icon type=\"md-add\" @click=\"categoryModal=!categoryModal\"/>\n        </div>\n\n        <!-- 添加分类模态框   -->\n        <Modal\n            v-model=\"categoryModal\"\n            title=\"添加分类\"\n            @on-ok=\"handleAddCategory\"\n            @keyup.enter.native=\"handleAddCategory\"\n        >\n            <Input v-model=\"categoryName\" placeholder=\"请输入分类名称\"/>\n        </Modal>\n\n        <!-- 添加rss资源 -->\n        <Modal\n            v-model=\"rssModal\"\n            title=\"添加rss链接\"\n            @on-ok=\"handleAddRss\"\n            @keyup.enter.native=\"handleAddRss\"\n        >\n            <Input v-model=\"rssUrl\" placeholder=\"请输入完整url\"/>\n        </Modal>\n\n        <!-- 分类上下文菜单 -->\n        <Dropdown\n            trigger=\"click\" \n            ref=\"categoryContextMenu\"\n            id=\"categoryContextMenu\"\n            style=\"display:fixed;\"\n            :transfer=\"true\"\n            @on-click=\"handleCategoryContextMenu\">\n            <DropdownMenu slot=\"list\">\n                <DropdownItem name=\"rename\">重命名</DropdownItem>\n                <DropdownItem name=\"delete\" style=\"color: #ed4014;\">删除</DropdownItem>\n            </DropdownMenu>\n        </Dropdown>\n\n        <!-- rss资源项目上下文菜单 -->\n        <Dropdown\n            trigger=\"click\" \n            ref=\"rssContextMenu\"\n            id=\"rssContextMenu\"\n            style=\"display:fixed;\"\n            :transfer=\"true\"\n            @on-click=\"handleRssContextMenu\">\n            <DropdownMenu slot=\"list\">\n                <DropdownItem name=\"rename\">重命名</DropdownItem>\n                <DropdownItem name=\"delete\" style=\"color: #ed4014;\">删除</DropdownItem>\n            </DropdownMenu>\n        </Dropdown>\n    </div>\n</template>\n\n\n<script>\nimport CollapseMenuItem from './CollapseMenuItem'\nimport CategoryAPI from '../../api/category';\nimport ResourceAPI from '../../api/resource';\n\nexport default {\n    name:'sider-bar',\n    components:{\n        CollapseMenuItem\n    },\n    data(){\n        return {\n            categoryModal:false,\n            rssModal:false,\n            categoryName:'',//添加分类的名称\n            rssUrl:'',//添加rss的url\n            addRssCategoryId:-1,//添加rss时的分类id\n            refreshArticleBtnClick:null,\n        }\n    },\n    created(){\n        this.refreshArticleBtnClick = this.throttle(this.handleArticleRefresh)\n    },\n    computed:{\n        //用户头像\n        userAvatar(){\n            return this.$store.user.avatar;\n        },\n        //用户rss分类\n        categoryList(){\n            return this.$store.categoryList;\n        },\n    },\n    methods:{\n        openRssAddModal(id){\n            this.addRssCategoryId = id;\n            this.rssModal = !this.rssModal;\n        },\n        //添加rss分类\n        async handleAddCategory(){\n            this.categoryModal = false;\n\n            if(!this.categoryName){\n                this.$Message.error('分类名称不能为空');\n                return;\n            }\n\n            const res = await CategoryAPI.add({\n                name:this.categoryName.trim(),\n            })\n            if(res.data.status){\n                this.$store.categoryList.unshift(res.data.data);\n            }else{\n                this.$Message.error(res.data.data);\n            }\n        },\n        //添加rss\n        async handleAddRss(){\n            this.rssModal = false;\n\n            if(!this.rssUrl){\n                this.$Message.error('rss资源链接不能为空');\n                return;\n            }\n\n            const res = await ResourceAPI.add({\n                url:this.rssUrl,\n                categoryId:this.addRssCategoryId,\n            })\n            \n            if(res.data.status){\n                this.$store.resourceList.unshift(res.data.data.resource);\n            }else{\n                this.$Message.error(res.data.data);\n            }\n\n        },\n        //刷新文章 再次拉取文章 查看是否有新的文章\n        async handleArticleRefresh(){\n            this.$store.isLoading = true;\n\n            const res = await ResourceAPI.refreshArticle(this.$store.rssId)\n            if(res.data.status){\n                this.$store.articleList=res.data.data;\n            }else{\n                this.$Message.error(res.data.data);\n            }\n\n            this.$store.isLoading = false;\n        },\n        //节流\n        throttle(fn){\n            let map = {};\n            return ()=>{\n                if(!map[this.$store.rssId]){\n                    map[this.$store.rssId]=true\n                    fn()\n                    setTimeout(()=>{map[this.$store.rssId]=false},5*60*1000)\n                }else{\n                    this.$Message.error('不要频繁刷新')\n                }\n            }\n        },\n        //分类上下文菜单\n        async handleCategoryContextMenu(op){\n            if(op === 'delete'){\n                const res = await CategoryAPI.delete(this.$store.contextMenuCId)\n                if(res.data.status){\n                    if(res.data.status){\n                        //删除store里面的数据\n                        const index = this.$store.categoryList.findIndex(item=>item.id === this.$store.contextMenuCId)\n                        if(index !== -1){\n                            this.$store.categoryList.splice(index,1)\n                        }else{\n                            this.$Message.error('发生错误')\n                        }\n                    }else{\n                        this.$Message.error(res.data.data)\n                    }\n                }\n            }\n\n        },\n        //rss 上下文菜单\n        async handleRssContextMenu(op){\n            if(op === 'delete'){\n                const res = await ResourceAPI.delete(this.$store.contextMenuRId)\n                if(res.data.status){\n                    if(res.data.status){\n                        //删除store里面的数据\n                        const index = this.$store.resourceList.findIndex(item=>item.id === this.$store.contextMenuRId)\n                        if(index !== -1){\n                            this.$store.resourceList.splice(index,1)\n                        }else{\n                            this.$Message.error('发生错误')\n                        }\n                    }else{\n                        this.$Message.error(res.data.data)\n                    }\n                }\n            }\n        }\n    }\n}\n</script>\n\n\n<style lang=\"scss\">\n.sider-bar{\n    color: $theme-color-white;\n    height: 100%;\n    position: relative;\n\n    .user{\n        display: flex;\n        justify-content: center;\n        align-items: center;\n\n        img{\n            width: 80px;\n            height: 80px;\n            border-radius: 40px;\n            margin: 20px 0;\n        }\n    }\n\n    .menu{\n        height: 70%;\n        overflow-y:auto;\n\n        &::-webkit-scrollbar{\n            width: 0;\n        } \n\n        .group{\n            margin-bottom: 40px; \n\n            .item{\n                >div:first-child{\n                    padding: 5px 10px;\n                    display: flex;\n                    align-items: center;\n                    cursor: pointer;\n\n                    p{\n                        margin: 0 5px;\n                    }\n                    \n                    .ivu-icon{\n                        font-weight: bold;\n                    }\n\n                    &:hover{\n                        background: $theme-color-1;\n                    }\n                }\n            }\n        }\n        \n    }\n\n    .action{\n        position:absolute;\n        bottom: 0;\n        left: 0;\n        padding: 10px 10px;\n        width: 100%;\n\n\n        .ivu-icon{\n            cursor: pointer;\n            font-weight: bold;\n        }\n\n        .ivu-icon:first-child{\n            margin-right: 80%; \n        }\n\n    }\n\n}\n</style>\n"]}]}